"""
Database models with TortoiseORM
Generated by RDT v2.0
"""
from tortoise import fields
from tortoise.models import Model
{% if auth_enabled %}
from passlib.context import CryptContext
from datetime import datetime, timezone
{% endif %}

from typing import Optional

{% if auth_enabled %}
# Password hashing context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
{% endif %}


class User(Model):
    """User model"""
    id = fields.IntField(pk=True)
    username = fields.CharField(max_length=50, unique=True, index=True)
    email = fields.CharField(max_length=100, unique=True, index=True)
{% if auth_enabled %}
    hashed_password = fields.CharField(max_length=255)
    is_active = fields.BooleanField(default=True)
    created_at = fields.DatetimeField(auto_now_add=True)
    updated_at = fields.DatetimeField(auto_now=True)
    
    # Relationships
    items: fields.ReverseRelation["Item"]
{% else %}
    full_name = fields.CharField(max_length=100, null=True)
    is_active = fields.BooleanField(default=True)
    
    # Relationships
    items: fields.ReverseRelation["Item"]
{% endif %}
    
    class Meta:
        table = "users"
    
{% if auth_enabled %}
    def set_password(self, password: str) -> None:
        """Hash and set password"""
        self.hashed_password = pwd_context.hash(password)
    
    def verify_password(self, password: str) -> bool:
        """Verify password against hash"""
        return pwd_context.verify(password, self.hashed_password)
{% endif %}
    
    def __str__(self) -> str:
        return f"<User(id={self.id}, username='{self.username}')>"
    
    class PydanticMeta:
        exclude = [{% if auth_enabled %}"hashed_password"{% endif %}]


class Item(Model):
    """Item model"""
    id = fields.IntField(pk=True)
    title = fields.CharField(max_length=100)
    description = fields.TextField(null=True)
{% if auth_enabled %}
    owner = fields.ForeignKeyField("models.User", related_name="items", on_delete=fields.CASCADE)
    created_at = fields.DatetimeField(auto_now_add=True)
{% else %}
    quantity = fields.IntField(default=0)
{% endif %}
    
    class Meta:
        table = "items"
    
    def __str__(self) -> str:
        return f"<Item(id={self.id}, title='{self.title}')>"
    
    class PydanticMeta:
        pass