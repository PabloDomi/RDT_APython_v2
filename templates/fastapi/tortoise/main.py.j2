"""
FastAPI Application with TortoiseORM
Generated by RDT v2.0
"""
from fastapi import FastAPI
from contextlib import asynccontextmanager
{% if auth_enabled -%}
from fastapi.middleware.cors import CORSMiddleware
{% endif -%}

from src.config import settings
from src.database import init_db, close_db
from src.api.routes import router


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Application lifespan events"""
    # Startup
    await init_db()
    yield
    # Shutdown
    await close_db()


app = FastAPI(
    title=settings.APP_NAME,
    description=f"{settings.APP_NAME} - Generated by RDT v2.0",
    version=settings.APP_VERSION,
    lifespan=lifespan,
    docs_url=settings.DOCS_URL if not settings.is_production else None,
    redoc_url=settings.REDOC_URL if not settings.is_production else None,
    openapi_url=settings.OPENAPI_URL if not settings.is_production else None,
)

{% if auth_enabled -%}
# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=settings.CORS_ORIGINS,
    allow_credentials=settings.CORS_ALLOW_CREDENTIALS,
    allow_methods=settings.CORS_ALLOW_METHODS,
    allow_headers=settings.CORS_ALLOW_HEADERS,
)
{% endif -%}

# Include routers
app.include_router(router, prefix=settings.API_PREFIX)


@app.get("/")
async def root():
    """Health check endpoint"""
    return {
        "status": "ok",
        "app": settings.APP_NAME,
        "version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT,
        "orm": "TortoiseORM"
    }


@app.get("/health")
async def health_check():
    """Detailed health check"""
    return {
        "status": "healthy",
        "database": "connected",
        "orm": "TortoiseORM",
        "api_version": settings.APP_VERSION,
        "environment": settings.ENVIRONMENT,
        "debug": settings.DEBUG
    }