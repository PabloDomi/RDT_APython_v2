"""
API routes with TortoiseORM
Generated by RDT v2.0
"""
from fastapi import APIRouter, HTTPException, status, Depends
{% if auth_enabled -%}
from src.config import settings
from fastapi.security import OAuth2PasswordBearer, OAuth2PasswordRequestForm
from jose import JWTError, jwt
from datetime import datetime, timedelta, timezone
import os
{% endif -%}
from typing import List

from src.models.models import User, Item
from src.schemas.schemas import (
    UserResponse, 
    UserCreate,
{% if auth_enabled -%}
    Token,
    TokenData,
{% else -%}
    UserUpdate,
{% endif -%}
    ItemResponse,
    ItemCreate,
    ItemUpdate
)

router = APIRouter()

{% if auth_enabled -%}
# JWT Configuration
SECRET_KEY = settings.JWT_SECRET_KEY
ALGORITHM = settings.JWT_ALGORITHM
ACCESS_TOKEN_EXPIRE_MINUTES = settings.JWT_ACCESS_TOKEN_EXPIRES

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/auth/login")


# JWT Helper Functions
def create_access_token(data: dict, expires_delta: timedelta = None) -> str:
    """Create JWT access token"""
    to_encode = data.copy()
    if expires_delta:
        expire = datetime.now(timezone.utc) + expires_delta
    else:
        expire = datetime.now(timezone.utc) + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
    
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


async def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    """Get current authenticated user"""
    credentials_exception = HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Could not validate credentials",
        headers={"WWW-Authenticate": "Bearer"},
    )
    
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        user_id: int = payload.get("sub")
        if user_id is None:
            raise credentials_exception
    except JWTError:
        raise credentials_exception
    
    user = await User.get_or_none(id=user_id)
    
    if user is None:
        raise credentials_exception
    
    return user


async def get_current_active_user(current_user: User = Depends(get_current_user)) -> User:
    """Get current active user"""
    if not current_user.is_active:
        raise HTTPException(status_code=400, detail="Inactive user")
    return current_user


# ============================================
# Authentication Routes
# ============================================

@router.post("/auth/register", response_model=UserResponse, status_code=status.HTTP_201_CREATED, tags=["Authentication"])
async def register(user_data: UserCreate):
    """
    Register a new user
    
    - **username**: unique username (3-50 characters)
    - **email**: valid email address
    - **password**: secure password (min 8 characters)
    """
    # Check if username exists
    if await User.exists(username=user_data.username):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already registered"
        )
    
    # Check if email exists
    if await User.exists(email=user_data.email):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already registered"
        )
    
    # Create new user
    user = User(
        username=user_data.username,
        email=user_data.email
    )
    user.set_password(user_data.password)
    await user.save()
    
    return await UserResponse.from_tortoise_orm(user)


@router.post("/auth/login", response_model=Token, tags=["Authentication"])
async def login(form_data: OAuth2PasswordRequestForm = Depends()):
    """
    Login with username and password
    
    Returns JWT access token for authentication
    """
    # Find user by username
    user = await User.get_or_none(username=form_data.username)
    
    if not user or not user.verify_password(form_data.password):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect username or password",
            headers={"WWW-Authenticate": "Bearer"},
        )
    
    if not user.is_active:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Inactive user"
        )
    
    # Create access token
    access_token = create_access_token(data={"sub": user.id})
    
    return {"access_token": access_token, "token_type": "bearer"}


@router.get("/auth/me", response_model=UserResponse, tags=["Authentication"])
async def get_me(current_user: User = Depends(get_current_active_user)):
    """
    Get current authenticated user information
    
    Requires valid JWT token in Authorization header
    """
    return await UserResponse.from_tortoise_orm(current_user)


# ============================================
# User Routes (Protected)
# ============================================

@router.get("/users", response_model=List[UserResponse], tags=["Users"])
async def list_users(
    skip: int = 0,
    limit: int = 100,
    current_user: User = Depends(get_current_active_user)
):
    """
    Get list of all users (requires authentication)
    
    - **skip**: number of records to skip (pagination)
    - **limit**: maximum number of records to return
    """
    users = await User.all().offset(skip).limit(limit)
    return [await UserResponse.from_tortoise_orm(user) for user in users]


@router.get("/users/{user_id}", response_model=UserResponse, tags=["Users"])
async def get_user(
    user_id: int,
    current_user: User = Depends(get_current_active_user)
):
    """Get specific user by ID (requires authentication)"""
    user = await User.get_or_none(id=user_id)
    
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    return await UserResponse.from_tortoise_orm(user)


# ============================================
# Item Routes (Protected)
# ============================================

@router.post("/items", response_model=ItemResponse, status_code=status.HTTP_201_CREATED, tags=["Items"])
async def create_item(
    item_data: ItemCreate,
    current_user: User = Depends(get_current_active_user)
):
    """
    Create a new item (requires authentication)
    
    The authenticated user becomes the owner of the item
    """
    item = await Item.create(
        title=item_data.title,
        description=item_data.description,
        owner=current_user
    )
    
    return await ItemResponse.from_tortoise_orm(item)


@router.get("/items", response_model=List[ItemResponse], tags=["Items"])
async def list_items(
    skip: int = 0,
    limit: int = 100,
    current_user: User = Depends(get_current_active_user)
):
    """
    Get list of items owned by current user (requires authentication)
    
    - **skip**: number of records to skip (pagination)
    - **limit**: maximum number of records to return
    """
    items = await Item.filter(owner=current_user).offset(skip).limit(limit)
    return [await ItemResponse.from_tortoise_orm(item) for item in items]


@router.get("/items/{item_id}", response_model=ItemResponse, tags=["Items"])
async def get_item(
    item_id: int,
    current_user: User = Depends(get_current_active_user)
):
    """Get specific item by ID (requires authentication)"""
    item = await Item.get_or_none(id=item_id).prefetch_related("owner")
    
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # Check ownership
    if item.owner.id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to access this item")
    
    return await ItemResponse.from_tortoise_orm(item)


@router.put("/items/{item_id}", response_model=ItemResponse, tags=["Items"])
async def update_item(
    item_id: int,
    item_data: ItemUpdate,
    current_user: User = Depends(get_current_active_user)
):
    """Update an item (requires authentication and ownership)"""
    item = await Item.get_or_none(id=item_id).prefetch_related("owner")
    
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # Check ownership
    if item.owner.id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to modify this item")
    
    # Update fields
    if item_data.title is not None:
        item.title = item_data.title
    if item_data.description is not None:
        item.description = item_data.description
    
    await item.save()
    
    return await ItemResponse.from_tortoise_orm(item)


@router.delete("/items/{item_id}", status_code=status.HTTP_204_NO_CONTENT, tags=["Items"])
async def delete_item(
    item_id: int,
    current_user: User = Depends(get_current_active_user)
):
    """Delete an item (requires authentication and ownership)"""
    item = await Item.get_or_none(id=item_id).prefetch_related("owner")
    
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # Check ownership
    if item.owner.id != current_user.id:
        raise HTTPException(status_code=403, detail="Not authorized to delete this item")
    
    await item.delete()
    
    return None

{% else -%}
# ============================================
# User Routes (Public)
# ============================================

@router.post("/users", response_model=UserResponse, status_code=status.HTTP_201_CREATED, tags=["Users"])
async def create_user(user_data: UserCreate):
    """
    Create a new user
    
    - **username**: unique username (3-50 characters)
    - **email**: valid email address
    - **full_name**: optional full name
    """
    # Check if username exists
    if await User.exists(username=user_data.username):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Username already exists"
        )
    
    # Check if email exists
    if await User.exists(email=user_data.email):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Email already exists"
        )
    
    # Create new user
    user = await User.create(
        username=user_data.username,
        email=user_data.email,
        full_name=user_data.full_name
    )
    
    return await UserResponse.from_tortoise_orm(user)


@router.get("/users", response_model=List[UserResponse], tags=["Users"])
async def list_users(skip: int = 0, limit: int = 100):
    """
    Get list of all users
    
    - **skip**: number of records to skip (pagination)
    - **limit**: maximum number of records to return
    """
    users = await User.all().offset(skip).limit(limit)
    return [await UserResponse.from_tortoise_orm(user) for user in users]


@router.get("/users/{user_id}", response_model=UserResponse, tags=["Users"])
async def get_user(user_id: int):
    """Get specific user by ID"""
    user = await User.get_or_none(id=user_id)
    
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    return await UserResponse.from_tortoise_orm(user)


@router.put("/users/{user_id}", response_model=UserResponse, tags=["Users"])
async def update_user(user_id: int, user_data: UserUpdate):
    """Update user information"""
    user = await User.get_or_none(id=user_id)
    
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    # Update fields
    if user_data.username is not None:
        # Check if new username already exists
        if await User.exists(username=user_data.username) and user.username != user_data.username:
            raise HTTPException(status_code=400, detail="Username already exists")
        user.username = user_data.username
    
    if user_data.email is not None:
        # Check if new email already exists
        if await User.exists(email=user_data.email) and user.email != user_data.email:
            raise HTTPException(status_code=400, detail="Email already exists")
        user.email = user_data.email
    
    if user_data.full_name is not None:
        user.full_name = user_data.full_name
    
    if user_data.is_active is not None:
        user.is_active = user_data.is_active
    
    await user.save()
    
    return await UserResponse.from_tortoise_orm(user)


@router.delete("/users/{user_id}", status_code=status.HTTP_204_NO_CONTENT, tags=["Users"])
async def delete_user(user_id: int):
    """Delete a user"""
    user = await User.get_or_none(id=user_id)
    
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    
    await user.delete()
    
    return None


# ============================================
# Item Routes (Public)
# ============================================

@router.post("/items", response_model=ItemResponse, status_code=status.HTTP_201_CREATED, tags=["Items"])
async def create_item(item_data: ItemCreate):
    """
    Create a new item
    
    - **title**: item title (1-100 characters)
    - **description**: optional description
    - **quantity**: quantity in stock (default: 0)
    """
    item = await Item.create(
        title=item_data.title,
        description=item_data.description,
        quantity=item_data.quantity
    )
    
    return await ItemResponse.from_tortoise_orm(item)


@router.get("/items", response_model=List[ItemResponse], tags=["Items"])
async def list_items(skip: int = 0, limit: int = 100):
    """
    Get list of all items
    
    - **skip**: number of records to skip (pagination)
    - **limit**: maximum number of records to return
    """
    items = await Item.all().offset(skip).limit(limit)
    return [await ItemResponse.from_tortoise_orm(item) for item in items]


@router.get("/items/{item_id}", response_model=ItemResponse, tags=["Items"])
async def get_item(item_id: int):
    """Get specific item by ID"""
    item = await Item.get_or_none(id=item_id)
    
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    
    return await ItemResponse.from_tortoise_orm(item)


@router.put("/items/{item_id}", response_model=ItemResponse, tags=["Items"])
async def update_item(item_id: int, item_data: ItemUpdate):
    """Update item information"""
    item = await Item.get_or_none(id=item_id)
    
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    
    # Update fields
    if item_data.title is not None:
        item.title = item_data.title
    if item_data.description is not None:
        item.description = item_data.description
    if item_data.quantity is not None:
        item.quantity = item_data.quantity
    
    await item.save()
    
    return await ItemResponse.from_tortoise_orm(item)


@router.delete("/items/{item_id}", status_code=status.HTTP_204_NO_CONTENT, tags=["Items"])
async def delete_item(item_id: int):
    """Delete an item"""
    item = await Item.get_or_none(id=item_id)
    
    if not item:
        raise HTTPException(status_code=404, detail="Item not found")
    
    await item.delete()
    
    return None
{% endif -%}