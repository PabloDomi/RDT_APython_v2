"""
Application configuration
Generated by RDT v2.0
"""
import os
from typing import Optional
from pydantic_settings import BaseSettings, SettingsConfigDict
from pydantic import Field


class Settings(BaseSettings):
    """Application settings"""
    
    # Application
    APP_NAME: str = "{{ name | title_case }}"
    APP_VERSION: str = "1.0.0"
    DEBUG: bool = Field(default=False, validation_alias="DEBUG")
    ENVIRONMENT: str = Field(default="development", validation_alias="ENVIRONMENT")
    
    # Database
    DATABASE_URL: str = Field(
        default="{{ database_url | default('sqlite://db.sqlite3') }}",
        validation_alias="DATABASE_URL"
    )
    
{% if auth_enabled -%}
    # JWT Authentication
    JWT_SECRET_KEY: str = Field(
        default="change-this-to-a-secure-random-string-min-32-characters",
        validation_alias="JWT_SECRET_KEY"
    )
    JWT_ALGORITHM: str = Field(default="HS256", validation_alias="JWT_ALGORITHM")
    JWT_ACCESS_TOKEN_EXPIRES: int = Field(default=30, validation_alias="JWT_ACCESS_TOKEN_EXPIRES")
    
{% endif -%}
    # CORS
    CORS_ORIGINS: list[str] = Field(
        default=["http://localhost:3000", "http://localhost:8000"],
        validation_alias="CORS_ORIGINS"
    )
    CORS_ALLOW_CREDENTIALS: bool = True
    CORS_ALLOW_METHODS: list[str] = ["*"]
    CORS_ALLOW_HEADERS: list[str] = ["*"]
    
    # API
    API_PREFIX: str = "/api"
    DOCS_URL: Optional[str] = "/docs"
    REDOC_URL: Optional[str] = "/redoc"
    OPENAPI_URL: Optional[str] = "/openapi.json"
    
    # Logging
    LOG_LEVEL: str = Field(default="INFO", validation_alias="LOG_LEVEL")
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=True,
        extra="ignore"
    )
    
    @property
    def is_production(self) -> bool:
        """Check if running in production"""
        return self.ENVIRONMENT.lower() == "production"
    
    @property
    def is_development(self) -> bool:
        """Check if running in development"""
        return self.ENVIRONMENT.lower() == "development"


# Create settings instance
settings = Settings()


# Tortoise ORM configuration
def get_tortoise_config() -> dict:
    """Get Tortoise ORM configuration"""
    return {
        "connections": {
            "default": settings.DATABASE_URL
        },
        "apps": {
            "models": {
                "models": ["src.models.models", "aerich.models"],
                "default_connection": "default",
            }
        },
{% if database in ['PostgreSQL', 'MySQL'] -%}
        "use_tz": True,
        "timezone": "UTC",
{% endif -%}
    }