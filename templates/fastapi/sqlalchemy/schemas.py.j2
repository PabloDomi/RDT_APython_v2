"""
Pydantic schemas for request/response validation
Generated by RDT v2.0
"""
from pydantic import BaseModel, EmailStr, Field, ConfigDict, field_validator
from typing import Optional

{% if auth_enabled %}
from src.security import PasswordValidator, InputSanitizer
{% endif %}


# User schemas
class UserBase(BaseModel):
    """Base user schema"""
    username: str = Field(..., min_length=3, max_length=50, description="Username (3-50 characters)")
    email: EmailStr = Field(..., description="Valid email address")
    
{% if auth_enabled %}
    @field_validator('username')
    @classmethod
    def validate_username(cls, v: str) -> str:
        """Validate and sanitize username"""
        try:
            return InputSanitizer.sanitize_username(v)
        except ValueError as e:
            raise ValueError(str(e))
    
    @field_validator('email')
    @classmethod
    def validate_email(cls, v: str) -> str:
        """Validate and sanitize email"""
        try:
            return InputSanitizer.sanitize_email(v)
        except ValueError as e:
            raise ValueError(str(e))
{% endif %}


{% if auth_enabled %}
class UserCreate(UserBase):
    """Schema for user registration"""
    password: str = Field(..., min_length=8, max_length=100, description="Password (min 8 characters)")
    
    @field_validator('password')
    @classmethod
    def validate_password(cls, v: str) -> str:
        """Validate password strength"""
        is_valid, errors = PasswordValidator.validate(v)
        if not is_valid:
            raise ValueError("; ".join(errors))
        return v


class UserLogin(BaseModel):
    """Schema for user login"""
    username: str = Field(..., description="Username")
    password: str = Field(..., description="Password")


class Token(BaseModel):
    """JWT token response"""
    access_token: str
    token_type: str = "bearer"


class TokenData(BaseModel):
    """Token payload data"""
    user_id: Optional[int] = None


{% else %}
class UserCreate(UserBase):
    """Schema for creating user"""
    full_name: Optional[str] = Field(None, description="Full name (optional)")


class UserUpdate(BaseModel):
    """Schema for updating user"""
    username: Optional[str] = Field(None, min_length=3, max_length=50)
    email: Optional[EmailStr] = None
    full_name: Optional[str] = None
    is_active: Optional[bool] = None


{% endif %}
class UserResponse(UserBase):
    """Schema for user response"""
    id: int
    is_active: bool
{% if not auth_enabled %}
    full_name: Optional[str] = None
{% endif %}
    
    model_config = ConfigDict(from_attributes=True)


# Item schemas
class ItemBase(BaseModel):
    """Base item schema"""
    title: str = Field(..., min_length=1, max_length=100, description="Item title")
    description: Optional[str] = Field(None, max_length=500, description="Item description (optional)")


class ItemCreate(ItemBase):
    """Schema for creating item"""
{% if not auth_enabled %}
    quantity: int = Field(default=0, ge=0, description="Quantity in stock")
{% endif %}
    pass


class ItemUpdate(BaseModel):
    """Schema for updating item"""
    title: Optional[str] = Field(None, min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
{% if not auth_enabled %}
    quantity: Optional[int] = Field(None, ge=0)
{% endif %}


class ItemResponse(ItemBase):
    """Schema for item response"""
    id: int
{% if auth_enabled %}
    owner_id: int
{% else %}
    quantity: int
{% endif %}

    model_config = ConfigDict(from_attributes=True)