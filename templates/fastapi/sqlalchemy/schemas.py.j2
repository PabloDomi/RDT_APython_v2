"""
Pydantic schemas for request/response validation
Generated by RDT v2.0
"""
from pydantic import BaseModel, EmailStr, Field, ConfigDict
from typing import Optional
{% if auth_enabled %}
from datetime import datetime
{% endif %}


# User schemas
class UserBase(BaseModel):
    """Base user schema"""
    username: str = Field(..., min_length=3, max_length=50)
    email: EmailStr


{% if auth_enabled %}
class UserCreate(UserBase):
    """Schema for user registration"""
    password: str = Field(..., min_length=8, max_length=100)


class UserLogin(BaseModel):
    """Schema for user login"""
    username: str
    password: str


class Token(BaseModel):
    """JWT token response"""
    access_token: str
    token_type: str = "bearer"


class TokenData(BaseModel):
    """Token payload data"""
    user_id: Optional[int] = None


{% else %}
class UserCreate(UserBase):
    """Schema for creating user"""
    full_name: Optional[str] = None


class UserUpdate(BaseModel):
    """Schema for updating user"""
    username: Optional[str] = Field(None, min_length=3, max_length=50)
    email: Optional[EmailStr] = None
    full_name: Optional[str] = None
    is_active: Optional[bool] = None


{% endif %}
class UserResponse(UserBase):
    """Schema for user response"""
    id: int
{% if auth_enabled %}
    is_active: bool
    created_at: datetime
{% else %}
    full_name: Optional[str] = None
    is_active: bool
{% endif %}
    model_config = ConfigDict(from_attributes=True)


# Item schemas
class ItemBase(BaseModel):
    """Base item schema"""
    title: str = Field(..., min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)


class ItemCreate(ItemBase):
    """Schema for creating item"""
{% if not auth_enabled %}
    quantity: int = Field(default=0, ge=0)
{% endif %}
    pass


class ItemUpdate(BaseModel):
    """Schema for updating item"""
    title: Optional[str] = Field(None, min_length=1, max_length=100)
    description: Optional[str] = Field(None, max_length=500)
{% if not auth_enabled %}
    quantity: Optional[int] = Field(None, ge=0)
{% endif %}
    pass


class ItemResponse(ItemBase):
    """Schema for item response"""
    id: int
{% if auth_enabled %}
    owner_id: int
    created_at: datetime
{% else %}
    quantity: int
{% endif %}
    model_config = ConfigDict(from_attributes=True)