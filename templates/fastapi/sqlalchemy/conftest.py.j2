"""
Pytest configuration and fixtures for FastAPI + SQLAlchemy
Generated by RDT v2.0
"""
import pytest
import pytest_asyncio
from httpx import AsyncClient, ASGITransport
from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncSession
from sqlalchemy.pool import StaticPool

from src.main import app
from src.database import Base, get_db
from src.models.models import User, Item


# Test database URL (SQLite in-memory)
TEST_DATABASE_URL = "sqlite+aiosqlite:///:memory:"


# Create test engine
test_engine = create_async_engine(
    TEST_DATABASE_URL,
    connect_args={"check_same_thread": False},
    poolclass=StaticPool,
    echo=False,
)

# Create test session factory
TestSessionLocal = async_sessionmaker(
    test_engine,
    class_=AsyncSession,
    expire_on_commit=False,
    autocommit=False,
    autoflush=False,
)


@pytest_asyncio.fixture(scope="function")
async def db():
    """
    Create a fresh database for each test.
    Creates all tables before test and drops them after.
    """
    # Create tables
    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
    
    # Create session
    async with TestSessionLocal() as session:
        yield session
    
    # Drop tables
    async with test_engine.begin() as conn:
        await conn.run_sync(Base.metadata.drop_all)


@pytest_asyncio.fixture(scope="function")
async def client(db: AsyncSession):
    """
    Create test client with database dependency override.
    """
    async def override_get_db():
        yield db
    
    app.dependency_overrides[get_db] = override_get_db
    
    async with AsyncClient(
        transport=ASGITransport(app=app),
        base_url="http://test"
    ) as ac:
        yield ac
    
    app.dependency_overrides.clear()


{% if auth_enabled %}
@pytest_asyncio.fixture(scope="function")
async def test_user(db: AsyncSession):
    """Create test user for authentication tests"""
    user = await User.create_user(
        username="testuser",
        email="test@example.com",
        password="TestPassword123!",
        db=db
    )
    return user


@pytest_asyncio.fixture(scope="function")
async def auth_token(client: AsyncClient, test_user: User):
    """Get authentication token for test user"""
    response = await client.post(
        "/api/auth/login",
        data={
            "username": "testuser",
            "password": "TestPassword123!"
        }
    )
    
    assert response.status_code == 200, f"Login failed: {response.json()}"
    return response.json()["access_token"]


@pytest_asyncio.fixture(scope="function")
async def auth_headers(auth_token: str):
    """Get authorization headers with valid JWT token"""
    return {
        "Authorization": f"Bearer {auth_token}",
        "Content-Type": "application/json"
    }
{% endif %}