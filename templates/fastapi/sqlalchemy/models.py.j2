"""
Database models
Generated by RDT v2.0
"""
from sqlalchemy import String, Integer{% if auth_enabled %}, DateTime{% endif %}

from sqlalchemy.orm import Mapped, mapped_column{% if auth_enabled %}, relationship{% endif %}

{% if auth_enabled %}
from datetime import datetime, timezone
from passlib.context import CryptContext
{% endif %}

from typing import Optional
from src.database import Base

{% if auth_enabled %}
# Password hashing context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
{% endif %}


class User(Base):
    """User model"""
    __tablename__ = "users"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    
    # User fields
    username: Mapped[str] = mapped_column(String(50), unique=True, index=True, nullable=False)
    email: Mapped[str] = mapped_column(String(100), unique=True, index=True, nullable=False)
{% if auth_enabled %}
    hashed_password: Mapped[str] = mapped_column(String(255), nullable=False)
    
    # Metadata
    is_active: Mapped[bool] = mapped_column(default=True)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
    updated_at: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True), onupdate=lambda: datetime.now(timezone.utc), nullable=True)
    
    def set_password(self, password: str) -> None:
        """Hash and set password"""
        self.hashed_password = pwd_context.hash(password)
    
    def verify_password(self, password: str) -> bool:
        """Verify password against hash"""
        return pwd_context.verify(password, self.hashed_password)
{% else %}
    
    # Additional fields
    full_name: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)
    is_active: Mapped[bool] = mapped_column(default=True)
{% endif %}

    def __repr__(self) -> str:
        return f"<User(id={self.id}, username='{self.username}')>"
    
    def to_dict(self) -> dict:
        """Convert model to dictionary"""
        return {
            "id": self.id,
            "username": self.username,
            "email": self.email,
{% if auth_enabled %}
            "is_active": self.is_active,
            "created_at": self.created_at.isoformat() if self.created_at else None,
{% else %}
            "full_name": self.full_name,
            "is_active": self.is_active,
{% endif %}
        }


# Example: Additional model for demonstration
class Item(Base):
    """Item model - example"""
    __tablename__ = "items"
    
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    title: Mapped[str] = mapped_column(String(100), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)
{% if auth_enabled %}
    owner_id: Mapped[int] = mapped_column(Integer, nullable=False)
    created_at: Mapped[datetime] = mapped_column(DateTime(timezone=True), default=lambda: datetime.now(timezone.utc))
{% else %}
    quantity: Mapped[int] = mapped_column(Integer, default=0)
{% endif %}
    
    def __repr__(self) -> str:
        return f"<Item(id={self.id}, title='{self.title}')>"
    
    def to_dict(self) -> dict:
        """Convert model to dictionary"""
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
{% if auth_enabled %}
            "owner_id": self.owner_id,
            "created_at": self.created_at.isoformat() if self.created_at else None,
{% else %}
            "quantity": self.quantity,
{% endif %}
        }