"""
Database models for FastAPI + SQLAlchemy
Generated by RDT v2.0
"""
from sqlalchemy import String, Integer, ForeignKey, Boolean
from sqlalchemy.orm import Mapped, mapped_column, relationship

{% if auth_enabled %}
from passlib.context import CryptContext
import hashlib
{% endif %}

from typing import Optional, List
from src.database import Base

{% if auth_enabled %}
# Password hashing context
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
{% endif %}


class User(Base):
    """User model"""
    __tablename__ = "users"

    # Primary key
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    
    # User fields
    username: Mapped[str] = mapped_column(String(50), unique=True, index=True, nullable=False)
    email: Mapped[str] = mapped_column(String(100), unique=True, index=True, nullable=False)
{% if auth_enabled %}
    hashed_password: Mapped[str] = mapped_column(String(255), nullable=False)
    is_active: Mapped[bool] = mapped_column(default=True)
    
    # Relationships
    items: Mapped[List["Item"]] = relationship("Item", back_populates="owner", cascade="all, delete-orphan")
    
    def set_password(self, password: str) -> None:
        """
        Hash and set password
        Pre-hash with SHA256 to avoid bcrypt's 72-byte limit
        """
        # Pre-hash the password with SHA256 to ensure it's always < 72 bytes
        password_hash = hashlib.sha256(password.encode('utf-8')).hexdigest()
        self.hashed_password = pwd_context.hash(password_hash)
    
    def verify_password(self, password: str) -> bool:
        """
        Verify password against hash
        Pre-hash with SHA256 first, then verify with bcrypt
        """
        # Pre-hash the password before verification
        password_hash = hashlib.sha256(password.encode('utf-8')).hexdigest()
        return pwd_context.verify(password_hash, self.hashed_password)

{% else %}
    full_name: Mapped[Optional[str]] = mapped_column(String(100), nullable=True)
    is_active: Mapped[bool] = mapped_column(default=True)
{% endif %}

    @classmethod
    async def create_user(cls, username: str, email: str, password: str, db) -> "User":
        """Create and return a new user"""
        user = cls(
            username=username,
            email=email,
            is_active=True
        )
{% if auth_enabled %}
        user.set_password(password)
{% endif %}
        db.add(user)
        await db.commit()
        await db.refresh(user)
        return user

    def __repr__(self) -> str:
        return f"<User(id={self.id}, username='{self.username}')>"
    
    def to_dict(self) -> dict:
        """Convert model to dictionary"""
        return {
            "id": self.id,
            "username": self.username,
            "email": self.email,
            "is_active": self.is_active,
{% if not auth_enabled %}
            "full_name": self.full_name,
{% endif %}
        }


class Item(Base):
    """Item model"""
    __tablename__ = "items"
    
    id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    title: Mapped[str] = mapped_column(String(100), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(String(500), nullable=True)
{% if auth_enabled %}
    owner_id: Mapped[int] = mapped_column(ForeignKey("users.id", ondelete="CASCADE"), nullable=False)
    
    # Relationships
    owner: Mapped["User"] = relationship("User", back_populates="items")
{% else %}
    quantity: Mapped[int] = mapped_column(Integer, default=0)
{% endif %}
    
    def __repr__(self) -> str:
        return f"<Item(id={self.id}, title='{self.title}')>"
    
    def to_dict(self) -> dict:
        """Convert model to dictionary"""
        return {
            "id": self.id,
            "title": self.title,
            "description": self.description,
{% if auth_enabled %}
            "owner_id": self.owner_id,
{% else %}
            "quantity": self.quantity,
{% endif %}
        }