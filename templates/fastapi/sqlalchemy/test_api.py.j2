"""
API endpoint tests for FastAPI + SQLAlchemy
Generated by RDT v2.0
"""
import pytest
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession

from src.models.models import User

{% if auth_enabled %}

@pytest.mark.asyncio
class TestAuthentication:
    """Test authentication endpoints"""
    
    async def test_register_success(self, client: AsyncClient, db: AsyncSession):
        """Test successful user registration"""
        response = await client.post(
            "/api/auth/register",
            json={
                "username": "newuser",
                "email": "new@example.com",
                "password": "SecurePass123!"
            }
        )
        
        assert response.status_code == 201
        data = response.json()
        assert data["username"] == "newuser"
        assert data["email"] == "new@example.com"
        assert "id" in data
        assert "password" not in data
        assert "hashed_password" not in data
    
    async def test_register_duplicate_username(self, client: AsyncClient, test_user: User):
        """Test registration with existing username"""
        response = await client.post(
            "/api/auth/register",
            json={
                "username": "testuser",
                "email": "different@example.com",
                "password": "Password123!"
            }
        )
        
        assert response.status_code == 400
        assert "username" in response.json()["detail"].lower() or \
               "already" in response.json()["detail"].lower()
    
    async def test_register_weak_password(self, client: AsyncClient, db: AsyncSession):
        """Test registration with weak password"""
        response = await client.post(
            "/api/auth/register",
            json={
                "username": "weakuser",
                "email": "weak@example.com",
                "password": "weak"
            }
        )
        
        assert response.status_code == 422
        assert "password" in response.json()["detail"][0]["loc"]
    
    async def test_register_invalid_email(self, client: AsyncClient, db: AsyncSession):
        """Test registration with invalid email"""
        response = await client.post(
            "/api/auth/register",
            json={
                "username": "testuser2",
                "email": "not-an-email",
                "password": "SecurePass123!"
            }
        )
        
        assert response.status_code == 422
        assert "email" in response.json()["detail"][0]["loc"]
    
    async def test_register_invalid_username(self, client: AsyncClient, db: AsyncSession):
        """Test registration with invalid username"""
        response = await client.post(
            "/api/auth/register",
            json={
                "username": "ab",  # Too short
                "email": "test@example.com",
                "password": "SecurePass123!"
            }
        )
        
        assert response.status_code == 422
    
    async def test_login_success(self, client: AsyncClient, test_user: User):
        """Test successful login"""
        response = await client.post(
            "/api/auth/login",
            data={
                "username": "testuser",
                "password": "TestPassword123!"
            }
        )
        
        assert response.status_code == 200
        data = response.json()
        assert "access_token" in data
        assert data["token_type"] == "bearer"
    
    async def test_login_invalid_credentials(self, client: AsyncClient, test_user: User):
        """Test login with wrong password"""
        response = await client.post(
            "/api/auth/login",
            data={
                "username": "testuser",
                "password": "WrongPassword"
            }
        )
        
        assert response.status_code == 401
    
    async def test_login_nonexistent_user(self, client: AsyncClient):
        """Test login with non-existent user"""
        response = await client.post(
            "/api/auth/login",
            data={
                "username": "nonexistent",
                "password": "Password123!"
            }
        )
        
        assert response.status_code == 401
    
    async def test_get_current_user(self, client: AsyncClient, auth_headers: dict, test_user: User):
        """Test getting current user info"""
        response = await client.get("/api/auth/me", headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json()
        assert data["username"] == "testuser"
        assert data["email"] == "test@example.com"
        assert "password" not in data
        assert "hashed_password" not in data
    
    async def test_get_current_user_no_token(self, client: AsyncClient):
        """Test accessing protected route without token"""
        response = await client.get("/api/auth/me")
        
        assert response.status_code == 401
    
    async def test_get_current_user_invalid_token(self, client: AsyncClient):
        """Test accessing protected route with invalid token"""
        response = await client.get(
            "/api/auth/me",
            headers={"Authorization": "Bearer invalid_token_xyz123"}
        )
        
        assert response.status_code == 401

{% else %}

@pytest.mark.asyncio
class TestUsers:
    """Test user endpoints"""
    
    async def test_create_user(self, client: AsyncClient, db: AsyncSession):
        """Test creating a new user"""
        response = await client.post(
            "/api/users",
            json={
                "username": "testuser",
                "email": "test@example.com",
                "full_name": "Test User"
            }
        )
        
        assert response.status_code == 201
        data = response.json()
        assert data["username"] == "testuser"
        assert data["email"] == "test@example.com"
        assert "id" in data
    
    async def test_list_users(self, client: AsyncClient, db: AsyncSession):
        """Test listing all users"""
        # Create test user
        user = User(username="user1", email="user1@example.com")
        db.add(user)
        await db.commit()
        
        response = await client.get("/api/users")
        
        assert response.status_code == 200
        data = response.json()
        assert isinstance(data, list)
        assert len(data) > 0
    
    async def test_get_user(self, client: AsyncClient, db: AsyncSession):
        """Test getting specific user"""
        user = User(username="getuser", email="get@example.com")
        db.add(user)
        await db.commit()
        await db.refresh(user)
        
        response = await client.get(f"/api/users/{user.id}")
        
        assert response.status_code == 200
        data = response.json()
        assert data["username"] == "getuser"
    
    async def test_get_nonexistent_user(self, client: AsyncClient):
        """Test getting non-existent user"""
        response = await client.get("/api/users/99999")
        
        assert response.status_code == 404
{% endif %}


@pytest.mark.asyncio
class TestHealthCheck:
    """Test health check endpoints"""
    
    async def test_root_endpoint(self, client: AsyncClient):
        """Test root endpoint"""
        response = await client.get("/")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "ok"
    
    async def test_health_endpoint(self, client: AsyncClient):
        """Test health check endpoint"""
        response = await client.get("/health")
        assert response.status_code == 200
        data = response.json()
        assert data["status"] == "healthy"
    
    async def test_docs_accessible(self, client: AsyncClient):
        """Test API documentation is accessible"""
        response = await client.get("/docs")
        assert response.status_code == 200