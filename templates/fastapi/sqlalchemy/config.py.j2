"""
Application configuration for FastAPI + SQLAlchemy
Generated by RDT v2.0
"""
from pydantic import Field
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """Application settings with validation"""
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
    )
    
    # Application
    app_name: str = "{{ name }}"
    environment: str = Field(default="development")
    debug: bool = Field(default=True)
    
    # Server
    host: str = "0.0.0.0"
    port: int = Field(default={{ port }})
    
    # Database
    {% if database == 'PostgreSQL' -%}
    database_url: str = Field(
        default="postgresql+asyncpg://postgres:postgres@localhost:5432/{{ name }}_db",
        description="Async PostgreSQL connection URL"
    )
    {% elif database == 'MySQL' -%}
    database_url: str = Field(
        default="mysql+aiomysql://root:root@localhost:3306/{{ name }}_db",
        description="Async MySQL connection URL"
    )
    {% elif database == 'SQLite' -%}
    database_url: str = Field(
        default="sqlite+aiosqlite:///./{{ name }}.db",
        description="Async SQLite connection URL"
    )
    {% endif -%}
    
    # SQLAlchemy
    sqlalchemy_echo: bool = Field(default=False)
    
    {% if auth_enabled -%}
    # JWT
    jwt_secret_key: str = Field(
        default="change-this-secret-key-min-32-chars",
        min_length=32,
        description="JWT secret key"
    )
    jwt_algorithm: str = "HS256"
    jwt_access_token_expires: int = 3600
    {% endif -%}
    
    # CORS
    cors_origins: list[str] = Field(
        default=["http://localhost:3000", "http://localhost:{{ port }}"]
    )
    
    @property
    def is_development(self) -> bool:
        return self.environment == "development"


# Singleton instance
settings = Settings()