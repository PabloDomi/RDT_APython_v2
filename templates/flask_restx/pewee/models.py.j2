"""
Database models with Peewee
Generated by RDT v2.0
"""
from src.extensions import db as database
{% if auth_enabled %}
from werkzeug.security import generate_password_hash, check_password_hash
{% endif %}
from peewee import (
    Model, AutoField, CharField, TextField,
    ForeignKeyField, BooleanField
)

class BaseModel(Model):
    class Meta:
        database = database

class User(BaseModel):
    """User model"""
    id = AutoField()
    username = CharField(unique=True, max_length=50, index=True)
    email = CharField(unique=True, max_length=100, index=True)
{% if auth_enabled %}
    password_hash = CharField(max_length=255)
    is_active = BooleanField(default=True)
    
    @classmethod
    def create_user(cls, username: str, email: str, password: str, **kwargs):
        """
        Helper method to create user with password.
        Use this instead of User.create() when you need to set a password.
        
        Example:
            user = User.create_user(
                username='john',
                email='john@example.com',
                password='SecurePass123!'
            )
        """
        password_hash = generate_password_hash(password, method='pbkdf2:sha256')
        return cls.create(
            username=username,
            email=email,
            password_hash=password_hash,
            **kwargs
        )
    
    def set_password(self, password: str) -> None:
        """Hash and set password"""
        self.password_hash = generate_password_hash(password, method='pbkdf2:sha256')
    
    def check_password(self, password: str) -> bool:
        """Verify password against hash"""
        return check_password_hash(self.password_hash, password)
{% else %}
    is_active = BooleanField(default=True)

    @classmethod
    def create_user(cls, username: str, email: str, password: str, **kwargs):
        """
        Helper method to create user with password.
        Use this instead of User.create() when you need to set a password.
        
        Example:
            user = User.create_user(
                username='john',
                email='john@example.com',
                password='SecurePass123!'
            )
        """
        password_hash = generate_password_hash(password, method='pbkdf2:sha256')
        return cls.create(
            username=username,
            email=email,
            **kwargs
        )
{% endif %}
    
    class Meta:
        table_name = 'users'
    
    def __repr__(self) -> str:
        return f"<User(id={self.id}, username='{self.username}')>"
    
    def to_dict(self) -> dict:
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'username': self.username,
            'email': self.email,
            'is_active': self.is_active,
            'is_active': self.is_active,
        }


class Item(BaseModel):
    """Item model"""
    id = AutoField()
    title = CharField(max_length=100)
    description = TextField(null=True)
    owner = ForeignKeyField(User, backref='items', on_delete='CASCADE')
    
    class Meta:
        table_name = 'items'
    
    def __repr__(self) -> str:
        return f"<Item(id={self.id}, title='{self.title}')>"
    
    def to_dict(self) -> dict:
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
            'owner': self.owner_id,
        }