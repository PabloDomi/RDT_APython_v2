"""
Pytest configuration and fixtures for Peewee
Generated by RDT v2.0
"""
import pytest
from peewee import SqliteDatabase
from src import create_app
from src.models.models import User, Item


# Use in-memory SQLite for tests
test_db = SqliteDatabase(':memory:')


@pytest.fixture(scope='session')
def app():
    """Create application for testing"""
    app = create_app()
    app.config['TESTING'] = True
    
    with app.app_context():
        # CRITICAL: Bind test database to models BEFORE creating tables
        test_db.bind([User, Item], bind_refs=False, bind_backrefs=False)
        
        # Connect and create tables
        if test_db.is_closed():
            test_db.connect()
        
        test_db.create_tables([User, Item], safe=True)
        
        yield app
        
        # Cleanup
        test_db.drop_tables([User, Item], safe=True)
    
    # Close database connection
    if not test_db.is_closed():
        test_db.close()


@pytest.fixture(scope='function')
def db(app):
    """
    Create clean database for each test.
    Uses transactions to rollback after each test.
    """
    with app.app_context():
        # Ensure connection is open
        if test_db.is_closed():
            test_db.connect()
        
        # Start transaction
        test_db.begin()
        
        yield test_db
        
        # Rollback transaction (only if connection is still open)
        try:
            if not test_db.is_closed():
                test_db.rollback()
        except Exception:
            pass  # Ignore errors during rollback


@pytest.fixture(scope='function')
def client(app):
    """Create test client"""
    return app.test_client()

{% if auth_enabled %}

@pytest.fixture(scope='function')
def test_user(db):
    """Create test user for authentication tests"""
    user = User.create_user(
        username='testuser',
        email='test@example.com',
        password='TestPassword123!'
    )
    return user


@pytest.fixture(scope='function')
def auth_token(client, test_user):
    """Get authentication token for test user"""
    response = client.post('/auth/login', json={
        'username': 'testuser',
        'password': 'TestPassword123!'
    })
    
    assert response.status_code == 200, f"Login failed: {response.json}"
    return response.json['access_token']


@pytest.fixture(scope='function')
def auth_headers(auth_token):
    """Get authorization headers with valid JWT token"""
    return {
        'Authorization': f'Bearer {auth_token}',
        'Content-Type': 'application/json'
    }
{% endif %}