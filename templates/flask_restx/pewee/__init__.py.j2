"""
Flask application factory with Peewee ORM
Generated by RDT v2.0
"""
from dotenv import load_dotenv
from flask import Flask
from src.config.config import Config
from src.extensions import api, db{% if auth_enabled %}, jwt{% endif %}

from src.models.models import User, Item
from src.routes.routes_example import user_ns

from peewee import DoesNotExist
from peewee import PostgresqlDatabase, MySQLDatabase
from peewee import SqliteDatabase


def create_app():
    """Application factory pattern"""
    load_dotenv()

    app = Flask(__name__)
    app.config.from_object(Config)

    # Initialize Peewee database
    db_config = app.config['DATABASE']

    # For SQLite, only database name is needed
    if db_config['engine'] == 'peewee.SqliteDatabase':
        database = SqliteDatabase(db_config['name'])
        db.initialize(database)
    else:
        # For other databases, use full config
        if 'postgres' in db_config['engine'].lower():
            database = PostgresqlDatabase(
                db_config['name'],
                user=db_config.get('user'),
                password=db_config.get('password'),
                host=db_config.get('host'),
                port=db_config.get('port')
            )
        else:
            database = MySQLDatabase(
                db_config['name'],
                user=db_config.get('user'),
                password=db_config.get('password'),
                host=db_config.get('host'),
                port=db_config.get('port')
            )
        db.initialize(database)
    
    # Initialize Flask-Restx
    api.init_app(app)
    
    {% if auth_enabled -%}
    # Initialize JWT
    jwt.init_app(app)
    {% endif -%}

    # Register namespaces
    api.add_namespace(user_ns)
    
    # Health check endpoint
    @app.route('/health')
    def health_check():
        """Health check endpoint for Docker"""
        return {'status': 'healthy', 'message': 'Application is running'}, 200
    
    # Create tables
    with app.app_context():
        db.obj.create_tables([User, Item], safe=True)

    @app.before_request
    def before_request():
        if db.obj.is_closed():
            db.obj.connect()

    @app.after_request
    def after_request(response):
        if not db.obj.is_closed():
            db.obj.close()
        return response

    return app

{% if auth_enabled %}

# JWT Configuration
@jwt.user_identity_loader
def user_identity_lookup(user):
    """Store user ID in token 'sub' field"""
    return str(user)


@jwt.user_lookup_loader
def user_lookup_callback(_jwt_header, jwt_data):
    """Load user from token 'sub' field"""
    identity = jwt_data["sub"]
    try:
        return User.get_by_id(int(identity))
    except DoesNotExist:
        return None
{% endif %}