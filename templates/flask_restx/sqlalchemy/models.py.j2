# templates/flask_restx/sqlalchemy/models.py.j2
"""
Database models
"""
from src.extensions import db
{% if auth_enabled %}
from src.security import PasswordValidator
{% endif %}


class User(db.Model):
    """User model"""
    __tablename__ = 'users'

    id = db.Column(db.Integer, primary_key=True, autoincrement=True)
    username = db.Column(db.String(255), unique=True, nullable=False)
    email = db.Column(db.String(255), unique=True, nullable=False)
    {% if auth_enabled %}
    password_hash = db.Column(db.String(255), nullable=False)
    {% else %}
    password = db.Column(db.String(255))
    {% endif %}
    created_at = db.Column(db.DateTime, server_default=db.func.now())
    updated_at = db.Column(
        db.DateTime,
        server_default=db.func.now(),
        onupdate=db.func.now()
    )

    def __repr__(self):
        return f'<User {self.username}>'

    {% if auth_enabled %}
    def set_password(self, password: str):
        """Hash and set password"""
        self.password_hash = PasswordValidator.hash_password(password)

    def check_password(self, password: str) -> bool:
        """Verify password against hash"""
        return PasswordValidator.verify_password(password, self.password_hash)
    {% endif %}

    def to_dict(self):
        """Convert to dictionary"""
        return {
            'id': self.id,
            'username': self.username,
            'email': self.email,
            'created_at': self.created_at.isoformat() if self.created_at else None,
        }

class Item(db.Model):
    """Item model"""
    __tablename__ = 'items'
    
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    description = db.Column(db.Text, nullable=True)
{% if auth_enabled %}
    owner_id = db.Column(db.Integer, db.ForeignKey('users.id', ondelete='CASCADE'), nullable=False)
    created_at = db.Column(db.DateTime(timezone=True), server_default=db.func.now())
{% else %}
    quantity = db.Column(db.Integer, default=0)
{% endif %}
    
    def __repr__(self) -> str:
        return f"<Item(id={self.id}, title='{self.title}')>"
    
    def to_dict(self) -> dict:
        """Convert model to dictionary"""
        return {
            'id': self.id,
            'title': self.title,
            'description': self.description,
{% if auth_enabled %}
            'owner_id': self.owner_id,
            'created_at': self.created_at.isoformat() if self.created_at else None,
{% else %}
            'quantity': self.quantity,
{% endif %}
        }