"""
Model tests
Generated by RDT v2.0
"""
import pytest
from src.models.models import User, Item
from src.extensions import db as _db

{% if auth_enabled %}

class TestUserModel:
    """Test User model"""
    
    def test_create_user(self, db):
        """Test creating a user"""
        user = User(username='testuser', email='test@example.com')
        user.set_password('TestPassword123!')
        
        db.session.add(user)
        db.session.commit()
        
        assert user.id is not None
        assert user.username == 'testuser'
        assert user.email == 'test@example.com'
        assert user.password_hash is not None
        assert user.password_hash != 'TestPassword123!'
    
    def test_password_hashing(self, db):
        """Test password is hashed correctly"""
        user = User(username='hashtest', email='hash@example.com')
        user.set_password('MyPassword123!')
        
        assert user.password_hash != 'MyPassword123!'
        assert user.check_password('MyPassword123!')
        assert not user.check_password('WrongPassword')
    
    def test_unique_username(self, db, test_user):
        """Test username uniqueness constraint"""
        duplicate_user = User(username='testuser', email='different@example.com')
        duplicate_user.set_password('Password123!')
        
        db.session.add(duplicate_user)
        
        with pytest.raises(Exception):
            db.session.commit()
    
    def test_unique_email(self, db, test_user):
        """Test email uniqueness constraint"""
        duplicate_user = User(username='different', email='test@example.com')
        duplicate_user.set_password('Password123!')
        
        db.session.add(duplicate_user)
        
        with pytest.raises(Exception):
            db.session.commit()
    
    def test_user_to_dict(self, test_user):
        """Test user serialization"""
        user_dict = test_user.to_dict()
        
        assert 'id' in user_dict
        assert user_dict['username'] == 'testuser'
        assert user_dict['email'] == 'test@example.com'
        assert 'password_hash' not in user_dict
        assert 'password' not in user_dict


class TestItemModel:
    """Test Item model"""
    
    def test_create_item(self, db, test_user):
        """Test creating an item"""
        item = Item(
            title='Test Item',
            description='Test description',
            owner_id=test_user.id
        )
        
        db.session.add(item)
        db.session.commit()
        
        assert item.id is not None
        assert item.title == 'Test Item'
        assert item.owner_id == test_user.id
    
    def test_item_to_dict(self, db, test_user):
        """Test item serialization"""
        item = Item(
            title='Serialization Test',
            description='Testing to_dict',
            owner_id=test_user.id
        )
        db.session.add(item)
        db.session.commit()
        
        item_dict = item.to_dict()
        
        assert 'id' in item_dict
        assert item_dict['title'] == 'Serialization Test'
        assert item_dict['owner_id'] == test_user.id

{% else %}

class TestUserModel:
    """Test User model"""
    
    def test_create_user(self, db):
        """Test creating a user"""
        user = User(
            username='testuser',
            email='test@example.com',
            full_name='Test User'
        )
        
        db.session.add(user)
        db.session.commit()
        
        assert user.id is not None
        assert user.username == 'testuser'
        assert user.email == 'test@example.com'
        assert user.full_name == 'Test User'
    
    def test_user_to_dict(self, db):
        """Test user serialization"""
        user = User(username='dictuser', email='dict@example.com')
        db.session.add(user)
        db.session.commit()
        
        user_dict = user.to_dict()
        
        assert 'id' in user_dict
        assert user_dict['username'] == 'dictuser'
        assert user_dict['email'] == 'dict@example.com'
{% endif %}