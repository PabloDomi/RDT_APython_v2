"""
API routes
Generated by RDT v2.0
"""
from flask import request
from flask_restx import Resource, Namespace, fields
{% if auth_enabled -%}
from flask_jwt_extended import create_access_token, jwt_required, get_jwt_identity
{% endif -%}
from src.models.models import User
from src.extensions import db

{% if auth_enabled -%}
# Authorization configuration
authorizations = {
    'Bearer': {
        'type': 'apiKey',
        'in': 'header',
        'name': 'Authorization'
    }
}

user_ns = Namespace('auth', description='Authentication', authorizations=authorizations)
{% else -%}
user_ns = Namespace('users', description='User operations')
{% endif -%}

# API Models
user_model = user_ns.model('User', {
    'id': fields.Integer(description='User ID'),
    'username': fields.String(description='Username'),
    'email': fields.String(description='Email address'),
})

{% if auth_enabled -%}
register_model = user_ns.model('Register', {
    'username': fields.String(required=True),
    'email': fields.String(required=True),
    'password': fields.String(required=True),
})

login_model = user_ns.model('Login', {
    'username': fields.String(required=True),
    'password': fields.String(required=True),
})


@user_ns.route('/register')
class Register(Resource):
    @user_ns.expect(register_model)
    @user_ns.marshal_with(user_model, code=201)
    def post(self):
        """Register new user"""
        data = request.json
        
        if User.query.filter_by(username=data['username']).first():
            user_ns.abort(400, 'Username exists')
        
        user = User(username=data['username'], email=data['email'])
        user.set_password(data['password'])
        db.session.add(user)
        db.session.commit()
        
        return user, 201


@user_ns.route('/login')
class Login(Resource):
    @user_ns.expect(login_model)
    def post(self):
        """Login"""
        data = request.json
        user = User.query.filter_by(username=data['username']).first()
        
        if not user or not user.check_password(data['password']):
            user_ns.abort(401, 'Invalid credentials')
        
        access_token = create_access_token(identity=user)
        return {'access_token': access_token, 'user': user.to_dict()}, 200


@user_ns.route('/me')
class CurrentUser(Resource):
    @user_ns.doc(security='Bearer')
    @jwt_required()
    @user_ns.marshal_with(user_model)
    def get(self):
        """Get current user"""
        current_user = get_jwt_identity()
        user = User.query.get(current_user)
        return user if user else user_ns.abort(404, 'Not found')
{% else -%}

user_input = user_ns.model('UserInput', {
    'username': fields.String(required=True),
    'email': fields.String(required=True),
})


@user_ns.route('/')
class UserList(Resource):
    @user_ns.marshal_list_with(user_model)
    def get(self):
        """Get all users"""
        return User.query.all()
    
    @user_ns.expect(user_input)
    @user_ns.marshal_with(user_model, code=201)
    def post(self):
        """Create user"""
        data = user_ns.payload
        user = User(username=data['username'], email=data['email'])
        db.session.add(user)
        db.session.commit()
        return user, 201
{% endif -%}