"""
API endpoint tests
Generated by RDT v2.0
"""
import pytest
from src.models.models import User

{% if auth_enabled %}

class TestAuthentication:
    """Test authentication endpoints"""
    
    def test_register_success(self, client, db):
        """Test successful user registration"""
        response = client.post('/auth/register', json={
            'username': 'newuser',
            'email': 'new@example.com',
            'password': 'SecurePass123!'
        })
        
        assert response.status_code == 201
        data = response.json
        assert data['username'] == 'newuser'
        assert data['email'] == 'new@example.com'
        assert 'id' in data
        assert 'password' not in data
    
    def test_register_duplicate_username(self, client, test_user):
        """Test registration with existing username"""
        response = client.post('/auth/register', json={
            'username': 'testuser',
            'email': 'different@example.com',
            'password': 'Password123!'
        })
        
        assert response.status_code == 400
        assert 'Username exists' in response.json['message']
    
    def test_login_success(self, client, test_user):
        """Test successful login"""
        response = client.post('/auth/login', json={
            'username': 'testuser',
            'password': 'TestPassword123!'
        })
        
        assert response.status_code == 200
        data = response.json
        assert 'access_token' in data
        assert 'user' in data
        assert data['user']['username'] == 'testuser'
    
    def test_login_invalid_credentials(self, client, test_user):
        """Test login with wrong password"""
        response = client.post('/auth/login', json={
            'username': 'testuser',
            'password': 'WrongPassword'
        })
        
        assert response.status_code == 401
    
    def test_login_nonexistent_user(self, client):
        """Test login with non-existent user"""
        response = client.post('/auth/login', json={
            'username': 'nonexistent',
            'password': 'Password123!'
        })
        
        assert response.status_code == 401
    
    def test_get_current_user(self, client, auth_headers, test_user):
        """Test getting current user info"""
        response = client.get('/auth/me', headers=auth_headers)
        
        assert response.status_code == 200
        data = response.json
        assert data['username'] == 'testuser'
        assert data['email'] == 'test@example.com'
    
    def test_get_current_user_no_token(self, client):
        """Test accessing protected route without token"""
        response = client.get('/auth/me')
        
        assert response.status_code == 401
    
    def test_get_current_user_invalid_token(self, client):
        """Test accessing protected route with invalid token"""
        response = client.get('/auth/me', headers={
            'Authorization': 'Bearer invalid_token'
        })
        
        assert response.status_code == 422

{% else %}

class TestUsers:
    """Test user endpoints"""
    
    def test_create_user(self, client, db):
        """Test creating a new user"""
        response = client.post('/users', json={
            'username': 'testuser',
            'email': 'test@example.com',
            'full_name': 'Test User'
        })
        
        assert response.status_code == 201
        data = response.json
        assert data['username'] == 'testuser'
        assert data['email'] == 'test@example.com'
        assert 'id' in data
    
    def test_list_users(self, client, db):
        """Test listing all users"""
        # Create test user
        user = User(username='user1', email='user1@example.com')
        db.session.add(user)
        db.session.commit()
        
        response = client.get('/users')
        
        assert response.status_code == 200
        data = response.json
        assert isinstance(data, list)
        assert len(data) > 0
    
    def test_get_user(self, client, db):
        """Test getting specific user"""
        user = User(username='getuser', email='get@example.com')
        db.session.add(user)
        db.session.commit()
        
        response = client.get(f'/users/{user.id}')
        
        assert response.status_code == 200
        data = response.json
        assert data['username'] == 'getuser'
    
    def test_get_nonexistent_user(self, client):
        """Test getting non-existent user"""
        response = client.get('/users/99999')
        
        assert response.status_code == 404
{% endif %}


class TestHealthCheck:
    """Test health check endpoints"""
    
    def test_swagger_ui(self, client):
        """Test Swagger UI is accessible"""
        response = client.get('/')
        assert response.status_code == 200