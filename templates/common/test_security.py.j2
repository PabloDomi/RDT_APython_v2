"""
Security tests
Generated by RDT v2.0
"""
import pytest
{% if auth_enabled -%}
from src.security import PasswordValidator, InputSanitizer
{% else -%}
from src.security import InputSanitizer
{% endif %}

{% if auth_enabled %}

class TestPasswordValidator:
    """Test password validation"""
    
    def test_valid_password(self):
        """Test valid password passes validation"""
        is_valid, errors = PasswordValidator.validate('SecurePass123!')
        assert is_valid is True
        assert len(errors) == 0
    
    def test_password_too_short(self):
        """Test password length validation"""
        is_valid, errors = PasswordValidator.validate('Short1!')
        assert is_valid is False
        assert any('at least' in error for error in errors)
    
    def test_password_no_uppercase(self):
        """Test uppercase letter requirement"""
        is_valid, errors = PasswordValidator.validate('lowercase123!')
        assert is_valid is False
        assert any('uppercase' in error for error in errors)
    
    def test_password_no_lowercase(self):
        """Test lowercase letter requirement"""
        is_valid, errors = PasswordValidator.validate('UPPERCASE123!')
        assert is_valid is False
        assert any('lowercase' in error for error in errors)
    
    def test_password_no_digit(self):
        """Test digit requirement"""
        is_valid, errors = PasswordValidator.validate('NoDigitsHere!')
        assert is_valid is False
        assert any('digit' in error for error in errors)
    
    def test_password_no_special_char(self):
        """Test special character requirement"""
        is_valid, errors = PasswordValidator.validate('NoSpecialChar123')
        assert is_valid is False
        assert any('special' in error for error in errors)
    
    def test_password_hashing(self):
        """Test password hashing and verification"""
        password = 'TestPassword123!'
        hashed = PasswordValidator.hash_password(password)
        
        assert hashed != password
        assert PasswordValidator.verify_password(password, hashed)
        assert not PasswordValidator.verify_password('WrongPassword', hashed)
{% endif %}


class TestInputSanitizer:
    """Test input sanitization"""
    
    def test_valid_email(self):
        """Test valid email passes"""
        email = InputSanitizer.sanitize_email('test@example.com')
        assert email == 'test@example.com'
    
    def test_email_lowercase(self):
        """Test email is converted to lowercase"""
        email = InputSanitizer.sanitize_email('Test@Example.COM')
        assert email == 'test@example.com'
    
    def test_email_strip_whitespace(self):
        """Test email whitespace is stripped"""
        email = InputSanitizer.sanitize_email('  test@example.com  ')
        assert email == 'test@example.com'
    
    def test_invalid_email(self):
        """Test invalid email raises error"""
        with pytest.raises(ValueError, match='Invalid email'):
            InputSanitizer.sanitize_email('not-an-email')
    
    def test_valid_username(self):
        """Test valid username passes"""
        username = InputSanitizer.sanitize_username('valid_user-123')
        assert username == 'valid_user-123'
    
    def test_username_strip_whitespace(self):
        """Test username whitespace is stripped"""
        username = InputSanitizer.sanitize_username('  testuser  ')
        assert username == 'testuser'
    
    def test_username_too_short(self):
        """Test username length validation"""
        with pytest.raises(ValueError, match='at least 3'):
            InputSanitizer.sanitize_username('ab')
    
    def test_username_invalid_chars(self):
        """Test username special character validation"""
        with pytest.raises(ValueError, match='letters, numbers'):
            InputSanitizer.sanitize_username('invalid@user')