# templates/common/config.py.j2
"""
Application configuration with Pydantic Settings
"""
import os
from typing import Optional
from pydantic import Field, field_validator
from pydantic_settings import BaseSettings, SettingsConfigDict


class Settings(BaseSettings):
    """Application settings with validation"""
    
    model_config = SettingsConfigDict(
        env_file=".env",
        env_file_encoding="utf-8",
        case_sensitive=False,
        extra="ignore"
    )
    
    # Application
    app_name: str = "{{ name }}"
    environment: str = Field(default="development")
    debug: bool = Field(default=True)
    
    # Server
    host: str = "0.0.0.0"
    port: int = Field(default={{ port }}, ge=1024, le=65535)
    
    # Database
    database_url: str = Field(
        default="sqlite:///{{ name }}.db",
        description="Database connection URL"
    )
    
    {% if orm == 'SQLAlchemy' %}
    # SQLAlchemy
    sqlalchemy_track_modifications: bool = False
    sqlalchemy_echo: bool = False
    {% endif %}
    
    {% if auth_enabled %}
    # JWT
    jwt_secret_key: str = Field(
        ...,
        min_length=32,
        description="JWT secret key (min 32 characters)"
    )
    jwt_algorithm: str = "HS256"
    jwt_access_token_expires: int = 3600  # 1 hour
    {% endif %}
    
    @property
    def is_development(self) -> bool:
        return self.environment == "development"
    
    @property
    def is_production(self) -> bool:
        return self.environment == "production"


# Singleton instance
settings = Settings()